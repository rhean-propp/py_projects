#!/bin/user/python3

# Filename: m2p3y.py
# Author: Rhean Propp
# Course: ITSC203
# Details: This program dumps the PE file header and identifies its parameters.

import datetime, time, pefile

name = input("Enter your name: ")                                                                                           # Grab user input
input_file = input("Input your file: ")                                                                                     # Grab the file to be used
now = datetime.datetime.now()                                                                                               # Get the date/time.
utc = int(time.time())                                                                                                      # Grab the seconds since the epoch.
cal = {1:"Jan", 2:"Feb", 3:"Mar", 4:"Apr", 5:"May", 6:"Jun", 7:"Jul", 8:"Aug", 9:"Sep", 10:"Oct", 11:"Nov", 12:"Dec"}       # Playing with dictionaries

print("\nReport generated by\t:", name, "\nContact\t\t\t:", name.lower().replace(" ", ".")+"@edu.sait.ca")                  # Print the email address.
print("Date/Time\t\t:", f"{cal[now.month]}-{now.day}-{now.year} {now.hour}:{now.minute}:{now.second} (utc: {utc})")         # Print the date/time

file = open(input_file, "rb")        # Open the executable file for reading in binary.

file.seek(0)                                # Move the cursor to the file signature
man_magic = file.read(2).hex().upper()      # Read the file signature
man_magic = "0x" + man_magic[2:] + man_magic[:2]

file.seek(60)                                   # Moving the cursor to PE file header
man_pe_header = file.read(1).hex().upper()      # Reading PE File Header

file.seek(252)                                          # Move the cursor to the machine
man_mach = file.read(2).hex().upper()                   # Grab the machine
man_mach = "x" + man_mach[2:] + "-" + man_mach[:2]      # Reverse the little endian and add formatting.

man_format = man_mach[4:] + " bit"      # Finding Format (Using Machine)

file.seek(288)                                                                                  # Move the cursor to the entry point.
man_entry_point = file.read(3).hex().upper()                                                    # read the entry point
man_entry_point =  "0x" + man_entry_point[5:] + man_entry_point[2:4] + man_entry_point[0:2]     # Reorder the entry point to big endian.

file.close()        # Close the file.

print("\nManual\t\t\t:\n","\nFile\t\t\t:", input_file, "\nMagic\t\t\t:", man_magic, "\nPE Header Offset\t:", f"0x{man_pe_header}")
print("Format\t\t\t:", man_format, "\nEndian\t\t\t: Big", "\nMachine\t\t\t:", man_mach, "\nEntry Point\t\t:", f"{man_entry_point}")

pe = pefile.PE(input_file)                                       # Using the PE Module to find the information in the file:

mod_magic = hex(pe.DOS_HEADER.e_magic)                              # Finding Magic
mod_header_offset = hex(pe.DOS_HEADER.e_lfanew)                     # Finding PE Header Offset
mod_mach = hex(pe.FILE_HEADER.Machine)                              # Finding Machine
mod_mach = (mod_mach[:4] + "-" + mod_mach[4:]).replace("0", "")     # Adding a dash
mod_format = mod_mach[4:] + " bit"                                  # Finding Format (Using Machine)
mod_entry_point = hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)       # Finding Entry Point

print("\nPE Module\t\t:\n", "\nFile\t\t\t:", input_file, "\nMagic\t\t\t:", mod_magic, "\nPE Header Offset\t:", mod_header_offset)
print("Format\t\t\t:", mod_format, "\nEndian\t\t\t: Big", "\nMachine\t\t\t:", mod_mach, "\nEntry Point\t\t:", mod_entry_point)

